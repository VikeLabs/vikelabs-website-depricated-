{"version":3,"sources":["assets/images/logo.png","components/Header/Header.js","assets/manifest.js","components/About/About.js","components/SocialMedia/SocialMedia.js","components/Projects/Project.js","components/Projects/Projects.js","components/HomePage/HomePage.js","components/ProjectPage/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","logo","alt","projects","name","id","About","SocialMedia","Project","props","Projects","map","project","i","key","HomePage","ProjectPage","useParams","find","proj","toString","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,gMCc5BC,MAVf,WACE,OACE,4BAAQC,UAAU,cAChB,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,YCRpCC,EAAW,CACtB,CACEC,KAAM,aACNC,GAAI,GAEN,CACED,KAAM,aACNC,GAAI,GAEN,CACED,KAAM,aACNC,GAAI,GAEN,CACED,KAAM,aACNC,GAAI,GAEN,CACED,KAAM,aACNC,GAAI,GAEN,CACED,KAAM,aACNC,GAAI,ICZOC,MARf,WACE,OACE,yBAAKR,UAAU,2BACb,kDCKSS,MARf,WACE,OACE,yBAAKT,UAAU,4BACb,gDCHC,SAASU,EAAQC,GACtB,OACE,kBAAC,IAAD,CAAMV,GAAE,mBAAcU,EAAMJ,IAAMP,UAAU,6BACzCW,EAAML,MCQEM,MAXf,SAAkBD,GAChB,IAAIN,EAAWM,EAAMN,SAASQ,KAAI,SAACC,EAASC,GAC1C,OAAO,kBAACL,EAAD,CAASH,GAAIO,EAAQP,GAAID,KAAMQ,EAAQR,KAAMU,IAAK,WAAaD,OAExE,OACE,yBAAKf,UAAU,sBACZK,ICOQY,MAVf,WACE,OACE,yBAAKjB,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUK,SAAUA,M,OCmBXa,MA1Bf,WAAwB,IAChBX,EAAOY,cAAPZ,GACFO,EAAUT,EAASe,MAAK,SAAAC,GAAI,OAAIA,EAAKd,GAAGe,aAAef,KAC3D,OACE,yBAAKP,UAAU,kBACb,yBAAKA,UAAU,wBACb,4BAAKc,EAAQR,OAEf,yBAAKN,UAAU,yBACb,oDAEF,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBACb,kDAEF,yBAAKA,UAAU,sBACb,6CAEF,yBAAKA,UAAU,uBACb,sDCJKuB,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eAAeC,UAAWP,IACtC,kBAAC,IAAD,CAAOM,KAAK,IAAIC,UAAWR,OCDfS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0017c9b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cc9e88bb.png\";","import React from \"react\";\r\nimport logo from \"../../assets/images/logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"app-header\">\r\n      <Link to='/'>\r\n        <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export const projects = [\n  {\n    name: \"Project #1\",\n    id: 1\n  },\n  {\n    name: \"Project #2\",\n    id: 2\n  },\n  {\n    name: \"Project #3\",\n    id: 3\n  },\n  {\n    name: \"Project #4\",\n    id: 4\n  },\n  {\n    name: \"Project #5\",\n    id: 5\n  },\n  {\n    name: \"Project #6\",\n    id: 6\n  }\n];\n","import React from 'react';\n\n\nfunction About() {\n  return (\n    <div className=\"about-container content\">\n      <span>About the club</span>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\n\n\nfunction SocialMedia() {\n  return (\n    <div className=\"social-container content\">\n      <span>Social Media</span>\n    </div>\n  );\n}\n\nexport default SocialMedia;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport function Project(props) {\n  return (\n    <Link to={`/project/${props.id}`} className=\"project-container content\">\n      {props.name}\n    </Link>\n  );\n}\n","import React from 'react';\nimport { Project } from './Project';\n\nfunction Projects(props) {\n  let projects = props.projects.map((project, i) => {\n    return <Project id={project.id} name={project.name} key={'project-' + i}/>\n  })\n  return (\n    <div className=\"projects-container\">\n      {projects}\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\nimport { projects } from '../../assets/manifest';\nimport About from \"../../components/About/About\";\nimport SocialMedia from \"../../components/SocialMedia/SocialMedia\";\nimport Projects from \"../../components/Projects/Projects\";\n\nfunction HomePage() {\n  return (\n    <div className=\"main-container\">\n      <About />\n      <SocialMedia />\n      <Projects projects={projects} />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { projects } from \"../../assets/manifest\";\n\nfunction ProjectPage() {\n  let { id } = useParams();\n  let project = projects.find(proj => proj.id.toString() === id);\n  return (\n    <div className=\"main-container\">\n      <div className=\"project-name content\">\n        <h3>{project.name}</h3>\n      </div>\n      <div className=\"project-about content\">\n        <span>About the project</span>\n      </div>\n      <div className=\"project-grid\">\n        <div className=\"content progress\">\n          <span>Progress/Status</span>\n        </div>\n        <div className=\"content tech-stack\">\n          <span>Tech Stack</span>\n        </div>\n        <div className=\"content team-member\">\n          <span>Team Member List</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProjectPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport HomePage from \"./components/HomePage/HomePage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ProjectPage from \"./components/ProjectPage/ProjectPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path='/project/:id' component={ProjectPage} />\n        <Route path='/' component={HomePage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}